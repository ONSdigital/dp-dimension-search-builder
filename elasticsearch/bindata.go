// Code generated by go-bindata.
// sources:
// mappings.json
// DO NOT EDIT!

package elasticsearch

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mappingsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x54\xc1\x8e\xdb\x3a\x0c\x3c\xcb\x5f\x11\xe8\xfa\xde\x65\x51\xf4\x92\x5f\xe9\x16\x02\x23\x31\x89\xb0\x92\x28\x50\x0c\x9c\x74\x91\x7f\x2f\x6c\xcb\x8e\x94\x14\xc5\x5e\x7b\x31\xa0\x19\x7a\xc8\x19\x11\xfa\x1c\x94\x2e\x28\xe2\xd3\xa9\xe8\xfd\xee\x73\x50\x4a\xfb\xe4\xf0\x5a\x0f\x4a\xa7\x4b\x3c\x20\x1b\x3a\x1a\xc6\x1c\xbc\x85\xa9\xee\xed\xff\x27\xae\x9c\x81\xdd\xc4\x7c\x5f\x18\x48\x10\x6e\xc5\xaf\x9a\x4a\xe9\xa3\x0f\x82\xbc\x9d\x95\x86\x8b\x90\xa5\x98\x03\x0a\x9a\x67\x56\xe9\x08\x57\x73\x62\x88\x7a\xbf\xfb\xb6\x88\xce\xa8\x4f\x2b\xfa\xb6\x81\x72\xcb\xa8\xf7\x3b\x8d\xee\x84\x26\xcd\xf4\x42\xdd\x6b\x89\xb6\x14\x02\xe4\x82\x66\x3c\x7b\xc1\x92\xc1\xfe\xa9\x65\x06\x11\xe4\x34\x49\xbd\xbf\x97\xff\xf4\xd6\x60\x72\x0e\x16\x23\x26\x99\xc8\x9d\x7e\x69\x5d\x7f\x35\xb5\x72\xed\x3f\x34\x53\x2c\x99\xfc\xea\x32\x60\x18\xcd\x2b\xdc\x84\xf5\xa3\x22\x4a\x07\x1a\x91\x2d\x14\xdc\x9a\xff\xd5\xd6\xa3\x48\xd8\xaf\x79\xa8\x9f\x8f\xc1\xe9\x03\x93\x5f\xda\xea\x0f\xbc\x8d\xc4\xee\xd5\x96\xbd\x14\xa1\xd8\xbb\x19\xea\xe7\x3e\xcc\xce\x74\x84\x9c\xdb\xf5\x71\x3e\x62\x2a\x9e\x92\xa1\x2c\x9e\xd2\xb6\x49\x99\x29\x23\x8b\xc7\x66\x2b\x2c\x39\x6c\xf2\x38\x7a\x0c\xae\xb4\x49\x30\x8c\xcd\xb1\x0b\xb1\x4f\xaf\x31\x5c\x87\x17\xbc\x4a\x03\xcf\x6b\x5d\x67\x9a\x5a\x68\x47\xb6\x34\x7c\x22\x8e\x13\x7e\x84\x50\xb0\xa2\xf7\xa7\x3d\x5a\xa5\xd7\xc0\xba\xfb\x0d\x70\xc0\xf0\x0f\x9a\x99\xa5\x3b\x27\x67\x28\xc6\x81\x40\x63\x66\x7d\x14\x66\xc1\x67\x85\x03\x51\x40\x48\xbd\xc8\xe3\x71\xb0\x67\x1f\x1c\x63\xfa\xaa\x9c\x4f\x82\x27\xe4\x5e\xee\xc2\xe1\xab\xff\xf7\xb7\xd3\xee\xeb\x70\x1f\x7e\x07\x00\x00\xff\xff\xc3\x7a\x1f\x4a\xf2\x04\x00\x00")

func mappingsJsonBytes() ([]byte, error) {
	return bindataRead(
		_mappingsJson,
		"mappings.json",
	)
}

func mappingsJson() (*asset, error) {
	bytes, err := mappingsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mappings.json", size: 1266, mode: os.FileMode(420), modTime: time.Unix(1518616975, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"mappings.json": mappingsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"mappings.json": &bintree{mappingsJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
